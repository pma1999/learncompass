"""Add missing columns to users table

Revision ID: 600fc48dcd34
Revises: b8d832d608d3
Create Date: 2025-04-30 22:58:07.881199

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '600fc48dcd34'
down_revision = 'b8d832d608d3'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('credit_transactions', schema=None) as batch_op:
        batch_op.alter_column('id',
               existing_type=sa.INTEGER(),
               nullable=False,
               autoincrement=True)
        batch_op.alter_column('created_at',
               existing_type=sa.TIMESTAMP(),
               type_=sa.DateTime(),
               existing_nullable=False,
               existing_server_default=sa.text('(CURRENT_TIMESTAMP)'))
        batch_op.create_unique_constraint('credit_transactions_stripe_checkout_session_id_key', ['stripe_checkout_session_id'])
        batch_op.create_unique_constraint('credit_transactions_stripe_payment_intent_id_key', ['stripe_payment_intent_id'])
        batch_op.create_index(batch_op.f('ix_credit_transactions_admin_user_id'), ['admin_user_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_credit_transactions_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_credit_transactions_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_credit_transactions_stripe_checkout_session_id'), ['stripe_checkout_session_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_credit_transactions_stripe_payment_intent_id'), ['stripe_payment_intent_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_credit_transactions_transaction_type'), ['transaction_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_credit_transactions_user_id'), ['user_id'], unique=False)

    with op.batch_alter_table('generation_tasks', schema=None) as batch_op:
        batch_op.alter_column('task_id',
               existing_type=sa.CHAR(length=36),
               type_=sa.String(),
               existing_nullable=False)
        batch_op.create_index('idx_generation_task_history_entry', ['history_entry_id'], unique=False)
        batch_op.create_index('idx_generation_task_status', ['status'], unique=False)
        batch_op.create_index('idx_generation_task_user_id', ['user_id'], unique=False)
        batch_op.create_index('idx_generation_task_user_status', ['user_id', 'status'], unique=False)
        batch_op.create_index(batch_op.f('ix_generation_tasks_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_generation_tasks_id'), ['id'], unique=False)

    with op.batch_alter_table('learning_path_progress', schema=None) as batch_op:
        batch_op.drop_index('uq_user_path_submodule')
        batch_op.create_unique_constraint('uq_user_path_submodule', ['user_id', 'learning_path_id', 'module_index', 'submodule_index'])

    with op.batch_alter_table('learning_paths', schema=None) as batch_op:
        batch_op.alter_column('language',
               existing_type=sa.VARCHAR(length=10),
               nullable=False)
        batch_op.create_index('idx_learning_path_public_share_id', ['share_id', 'is_public'], unique=True, postgresql_where=sa.text('is_public = 1'))
        batch_op.create_index('idx_learning_path_user_favorite', ['user_id', 'favorite'], unique=False)
        batch_op.create_index('idx_learning_path_user_source', ['user_id', 'source'], unique=False)
        batch_op.create_index(batch_op.f('ix_learning_paths_is_public'), ['is_public'], unique=False)
        batch_op.create_index(batch_op.f('ix_learning_paths_language'), ['language'], unique=False)
        batch_op.create_index(batch_op.f('ix_learning_paths_share_id'), ['share_id'], unique=True)
        batch_op.create_index(batch_op.f('ix_learning_paths_topic'), ['topic'], unique=False)
        batch_op.create_index(batch_op.f('ix_learning_paths_user_id'), ['user_id'], unique=False)

    with op.batch_alter_table('sessions', schema=None) as batch_op:
        batch_op.alter_column('last_used_at',
               existing_type=sa.TIMESTAMP(),
               type_=sa.DateTime(),
               nullable=False)
        batch_op.create_index(batch_op.f('ix_sessions_user_id'), ['user_id'], unique=False)

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('encrypted_google_api_key', sa.String(), nullable=True))
        batch_op.add_column(sa.Column('encrypted_perplexity_api_key', sa.String(), nullable=True))
        batch_op.add_column(sa.Column('password_reset_token_expires_at', sa.DateTime(), nullable=True))
        batch_op.alter_column('is_admin',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('0'))
        batch_op.create_index('ix_users_password_reset_token_hash', ['password_reset_token_hash'], unique=False)

    # --- Create DESC indexes outside batch, only for non-SQLite --- 
    bind = op.get_bind()
    if bind.dialect.name != 'sqlite':
        print("Creating DESC indexes on learning_paths for non-SQLite dialect")
        op.create_index('idx_learning_path_user_date_desc', 'learning_paths', ['user_id', sa.text('creation_date DESC')], unique=False)
        op.create_index('idx_learning_path_user_fav_date_desc', 'learning_paths', ['user_id', 'favorite', sa.text('creation_date DESC')], unique=False)
        op.create_index('idx_learning_path_user_modified_desc', 'learning_paths', ['user_id', sa.text('last_modified_date DESC')], unique=False)
    else:
        print("Skipping DESC indexes on learning_paths for SQLite dialect")

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index('ix_users_password_reset_token_hash')
        batch_op.alter_column('is_admin',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('0'))
        batch_op.drop_column('password_reset_token_expires_at')
        batch_op.drop_column('encrypted_perplexity_api_key')
        batch_op.drop_column('encrypted_google_api_key')

    with op.batch_alter_table('sessions', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_sessions_user_id'))
        batch_op.alter_column('last_used_at',
               existing_type=sa.DateTime(),
               type_=sa.TIMESTAMP(),
               nullable=True)

    with op.batch_alter_table('learning_paths', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_learning_paths_user_id'))
        batch_op.drop_index(batch_op.f('ix_learning_paths_topic'))
        batch_op.drop_index(batch_op.f('ix_learning_paths_share_id'))
        batch_op.drop_index(batch_op.f('ix_learning_paths_language'))
        batch_op.drop_index(batch_op.f('ix_learning_paths_is_public'))
        batch_op.drop_index('idx_learning_path_user_source')
        batch_op.drop_index('idx_learning_path_user_favorite')
        batch_op.drop_index('idx_learning_path_public_share_id', postgresql_where=sa.text('is_public = 1'))
        batch_op.alter_column('language',
               existing_type=sa.VARCHAR(length=10),
               nullable=True)

    with op.batch_alter_table('learning_path_progress', schema=None) as batch_op:
        batch_op.drop_constraint('uq_user_path_submodule', type_='unique')
        batch_op.create_index('uq_user_path_submodule', ['user_id', 'learning_path_id', 'module_index', 'submodule_index'], unique=1)

    with op.batch_alter_table('generation_tasks', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_generation_tasks_id'))
        batch_op.drop_index(batch_op.f('ix_generation_tasks_created_at'))
        batch_op.drop_index('idx_generation_task_user_status')
        batch_op.drop_index('idx_generation_task_user_id')
        batch_op.drop_index('idx_generation_task_status')
        batch_op.drop_index('idx_generation_task_history_entry')
        batch_op.alter_column('task_id',
               existing_type=sa.String(),
               type_=sa.CHAR(length=36),
               existing_nullable=False)

    with op.batch_alter_table('credit_transactions', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_credit_transactions_user_id'))
        batch_op.drop_index(batch_op.f('ix_credit_transactions_transaction_type'))
        batch_op.drop_index(batch_op.f('ix_credit_transactions_stripe_payment_intent_id'))
        batch_op.drop_index(batch_op.f('ix_credit_transactions_stripe_checkout_session_id'))
        batch_op.drop_index(batch_op.f('ix_credit_transactions_id'))
        batch_op.drop_index(batch_op.f('ix_credit_transactions_created_at'))
        batch_op.drop_index(batch_op.f('ix_credit_transactions_admin_user_id'))
        batch_op.drop_constraint('credit_transactions_stripe_payment_intent_id_key', type_='unique')
        batch_op.drop_constraint('credit_transactions_stripe_checkout_session_id_key', type_='unique')
        batch_op.alter_column('created_at',
               existing_type=sa.DateTime(),
               type_=sa.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('(CURRENT_TIMESTAMP)'))
        batch_op.alter_column('id',
               existing_type=sa.INTEGER(),
               nullable=True,
               autoincrement=True)

    # --- Remove DESC indexes outside batch, only for non-SQLite --- 
    bind = op.get_bind()
    if bind.dialect.name != 'sqlite':
        print("Dropping DESC indexes on learning_paths for non-SQLite dialect")
        op.drop_index('idx_learning_path_user_modified_desc', table_name='learning_paths')
        op.drop_index('idx_learning_path_user_fav_date_desc', table_name='learning_paths')
        op.drop_index('idx_learning_path_user_date_desc', table_name='learning_paths')
    else:
        print("Skipping DESC index drop on learning_paths for SQLite dialect")

    # ### end Alembic commands ### 